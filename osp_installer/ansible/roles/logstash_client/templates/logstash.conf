input {
 file {
    path => "{{ tempest_dir }}/tempest/tempest_results.csv"
    start_position => beginning
  }
}

filter {
  grok {
    patterns_dir => "./patterns"
    match => { "message" => ".(?<class>(\w+\.)+\w+)\.(?<test>\w+)\[(?<test_id>.+)\]..%{WORD:status}\,%{TIMESTAMP_ISO8601:start}\,%{TIMESTAMP_ISO8601:end}" }
    add_field => {
        "build_no" => '{{ lookup('env','BUILD_NUMBER') }}'
         "job_name" => '{{ lookup('env','JOB_NAME') }}'
    }
  }
  mutate {
    uppercase => [ "status" ]
    convert => { "build_no" => "integer" }
  }
ruby {
    init => "require 'time'"
    code => "event['duration'] = Time.parse(event['end']).to_f - Time.parse(event['start']).to_f;"
}

#apply tags for test names
 if "v6" in [class] or "V6" in [class]{
  mutate {
     add_tag => "v6"
  }
  }
 if "network" in [class] or "network" in [test_id]{
  mutate {
     add_tag => "network"
  }
  }
 if "volume" in [test_id] or "volume" in [class]{
  mutate {
     add_tag => "volume"
  }
  }
 if "scenario" in [class]{
  mutate {
     add_tag => "scenario"
  }
  }
 if "object_storage" in [class]{
  mutate {
     add_tag => "object_storage"
  }
  }
  if "negative" in [class] or "negative" in [test_id]{
  mutate {
     add_tag => "negative"
  }
  }
  if "compute" in [class] or "compute" in [test_id]{
  mutate {
     add_tag => "compute"
  }
  }
  if "image" in [class]{
  mutate {
     add_tag => "image"
  }
  }
  if "identity" in [class] or "identity" in [test_id]{
  mutate {
     add_tag => "identity"
  }
  }
}

output {
 elasticsearch {
        document_type => "ci_test"
        hosts => [{{ elasticsearch_host }}]
        index => {{ elasticsearch_index }}
    }

}