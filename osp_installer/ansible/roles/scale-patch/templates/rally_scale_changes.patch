diff --git a/rally/plugins/openstack/scenarios/nova/servers.py b/rally/plugins/openstack/scenarios/nova/servers.py
index 274b14d..53e04d4 100644
--- a/rally/plugins/openstack/scenarios/nova/servers.py
+++ b/rally/plugins/openstack/scenarios/nova/servers.py
@@ -20,6 +20,7 @@ from rally import consts
 from rally import exceptions as rally_exceptions
 from rally.plugins.openstack import scenario
 from rally.plugins.openstack.scenarios.cinder import utils as cinder_utils
+from rally.plugins.openstack.scenarios.neutron import utils as neutron_utils
 from rally.plugins.openstack.scenarios.nova import utils
 from rally.plugins.openstack.wrappers import network as network_wrapper
 from rally.task import types
@@ -30,7 +31,8 @@ LOG = logging.getLogger(__name__)
 
 
 class NovaServers(utils.NovaScenario,
-                  cinder_utils.CinderScenario):
+                  cinder_utils.CinderScenario,
+                  neutron_utils.NeutronScenario):
     """Benchmark scenarios for Nova servers."""
 
     @types.set(image=types.ImageResourceType,
@@ -792,3 +794,39 @@ class NovaServers(utils.NovaScenario,
         """
         server = self._boot_server(image, flavor, **kwargs)
         self._get_server_console_output(server, length)
+
+    @types.set(image=types.ImageResourceType,
+               flavor=types.FlavorResourceType)
+    @validation.image_valid_on_flavor("flavor", "image")
+    @validation.required_services(consts.Service.NOVA, consts.Service.NEUTRON)
+    @validation.required_openstack(admin=True, users=True)
+    @scenario.configure(context={"cleanup": ["nova", "neutron"]})
+    def boot_multiple_servers_with_nic(self, image, flavor, count=2,
+                                       network_create_args=None,
+                                       subnet_create_args=None,
+                                       subnet_cidr_start=None,
+                                       subnets_per_network=None,
+                                       min_sleep=0, max_sleep=0,
+                                       force_delete=False, **kwargs):
+        """Boot multiple servers in a single request and delete them.
+
+        Deletion is done in parallel with one request per server, not
+        with a single request for all servers.
+
+        :param image: The image to boot from
+        :param flavor: Flavor used to boot instance
+        :param count: Number of instances to boot
+        :param min_sleep: Minimum sleep time in seconds (non-negative)
+        :param max_sleep: Maximum sleep time in seconds (non-negative)
+        :param force_delete: True if force_delete should be used
+        :param kwargs: Optional additional arguments for instance creation
+        """
+        network = self._create_network(network_create_args or {})
+        print("network - %s" % network)
+        subnets = self._create_subnets(network, subnet_create_args, subnet_cidr_start,
+                                       subnets_per_network)
+        print("subnets - %s" % subnets)
+        kwargs["nics"] = [{"net-id": network["network"]["id"]}]
+        print("kwargs - %s" % kwargs)
+        servers = self._boot_servers(image, flavor, 1, instances_amount=count,
+                                     **kwargs)
diff --git a/rally/plugins/openstack/scenarios/nova/utils.py b/rally/plugins/openstack/scenarios/nova/utils.py
index 98b8859..cc1e7d4 100644
--- a/rally/plugins/openstack/scenarios/nova/utils.py
+++ b/rally/plugins/openstack/scenarios/nova/utils.py
@@ -874,21 +874,21 @@ class NovaScenario(scenario.OpenStackScenario):
         """
         server.unlock()
 
-    @atomic.action_timer("nova.create_network")
-    def _create_network(self, ip_range, **kwargs):
-        """Create nova network.
-
-        :param ip_range: IP range in CIDR notation to create
-        """
-        net_label = self.generate_random_name()
-        ip_range = network_wrapper.generate_cidr(start_cidr=ip_range)
-        return self.admin_clients("nova").networks.create(
-            label=net_label, cidr=ip_range, **kwargs)
-
-    @atomic.action_timer("nova.delete_network")
-    def _delete_network(self, net_id):
-        """Delete nova network.
-
-        :param net_id: The nova-network ID to delete
-        """
-        return self.admin_clients("nova").networks.delete(net_id)
+#    @atomic.action_timer("nova.create_network")
+#    def _create_network(self, ip_range, **kwargs):
+#        """Create nova network.
+#
+#        :param ip_range: IP range in CIDR notation to create
+#        """
+#        net_label = self.generate_random_name()
+#        ip_range = network_wrapper.generate_cidr(start_cidr=ip_range)
+#        return self.admin_clients("nova").networks.create(
+#            label=net_label, cidr=ip_range, **kwargs)
+#
+#    @atomic.action_timer("nova.delete_network")
+#    def _delete_network(self, net_id):
+#        """Delete nova network.
+#
+#        :param net_id: The nova-network ID to delete
+#        """
+#        return self.admin_clients("nova").networks.delete(net_id)
