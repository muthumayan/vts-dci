---

###
# TODO: this block should probably go in some other location
- name: Find Overcloud Connection Properties (OS_AUTH_URL)
  shell: "source /home/stack/overcloudrc && echo ${OS_AUTH_URL}"
  register: OS_AUTH_URL

- name: Find Overcloud Connection Properties (OS_PASSWORD)
  shell: "source /home/stack/overcloudrc && echo ${OS_PASSWORD}"
  register: OS_PASSWORD

- name: Set Overcloud Connection Variables
  set_fact:
    overcloud_os_auth_url: "{{ OS_AUTH_URL['stdout'] }}"
    overcloud_os_admin_password: "{{ OS_PASSWORD['stdout'] }}"
###

# setup ssh config back on the host running ansible, then add the new overcloud nodes
# NOTE: the overcloud nodes will jump through the undercloud (ssh proxy), allowing for private IP's on the overcloud.
- name: create .ssh dir
  file: path=/home/stack/.ssh mode=0700 owner=stack group=stack state=directory

- name: Build authorized keys file
  shell: "cat /root/.ssh/authorized_keys /home/stack/.ssh/id_rsa.pub > /tmp/authorized_keys"

- name: copy the authorized_keys file
  command: cp /root/.ssh/authorized_keys /home/stack/.ssh/

- name: set file permissions on authorized_hosts
  file: path=/home/stack/.ssh/authorized_keys mode=0600 owner=stack group=stack

- name: copy the undercloud id_rsa key back to the slave
  fetch: src=/home/stack/.ssh/id_rsa dest=../../id_rsa_undercloud flat=yes

- name: copy id_rsa key back to the slave
  fetch: src=~/.ssh/id_rsa dest=../../id_rsa_undercloud_instance flat=yes

- name: copy get-overcloud-nodes.py to undercloud
  template: >
      src=get-overcloud-nodes.py.j2
      dest=/home/stack/get-overcloud-nodes.py
      mode=0755

- name: fetch overcloud node names and IPs
  shell: >
      source /home/stack/stackrc;
      python /home/stack/get-overcloud-nodes.py
  register: overcloud_nodes_and_type
  ignore_errors: yes

- name: add each overcloud node to ansible
  add_host:
    name={{ item.name }}
    groups=overcloud,overcloud_{{ item.type }}
    ansible_ssh_host={{ item.name }}
    ansible_fqdn={{ item.ip }}
    ansible_ssh_user="heat-admin"
    ansible_ssh_private_key_file="../../id_rsa_undercloud"
  ignore_errors: yes
  with_items: overcloud_nodes_and_type.stdout

- name: Allow root ssh on Overcloud Nodes
  sudo_user: stack
  shell: >
         ssh  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
         heat-admin@{{ item.ip }}
         sudo sed -i'' 's_.*ssh-rsa_ssh-rsa_' /root/.ssh/authorized_keys
  with_items: overcloud_nodes_and_type.stdout

- name: Set authorized_keys on Overcloud Nodes
  shell: >
        scp -i /home/stack/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        /tmp/authorized_keys
        root@{{ item.ip }}:/root/.ssh/authorized_keys
  with_items: overcloud_nodes_and_type.stdout

- name: setup ssh config
  template: src=ssh_config.j2 dest=~/ssh.config.ansible mode=0755

- name: copy ssh_config back to the slave
  fetch: src=~/ssh.config.ansible dest=../../ssh.config.ansible flat=yes

- name: change mod for ssh.config.ansible
  local_action: shell chmod 755 ../../ssh.config.ansible




# TODO: We can do this directly from a single ansible run now (we will still have an extra hop to copy things to the nodes
#- name: Bld the ansible inventory file for overcloud
#  sudo_user: stack
#  shell: source /home/stack/stackrc && . /home/stack/openstack-tools/openstack/tripleo_bld_ansible_inv.sh /home/stack/ansible_hosts

# Removed for boxborough...Not needed
#- name: install filebeat on the overcloud nodes
#  sudo_user: stack
#  shell: source /home/stack/venv_ansible/bin/activate && ansible-playbook -i /home/stack/ansible_hosts /home/stack/openstack-tools/openstack/ansible/setup_filebeat.yml -e "filebeat_port={{ filebeat_port }} testbed_name={{ testbed_name if testbed_name is defined else ansible_hostname }}"

